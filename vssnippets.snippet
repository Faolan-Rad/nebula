<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets
    xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">


<!-- header  -->
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Nebula Namespace Header</Title>
            <Shortcut>nheader</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Object>
                    <ID>description</ID>
                    <Type>String of text</Type>
                    <ToolTip>Write a description of this header file.</ToolTip>
                    <Default>WRITE ME OR ELSE!</Default>
                </Object>
                <Object>
                    <ID>namespace</ID>
                    <Type>Namespace</Type>
                    <ToolTip>Select a namespace.</ToolTip>
                    <Default>Base</Default>
                </Object>
                <Object>
                    <ID>year</ID>
                    <Type>Current year</Type>
                    <ToolTip>Please insert this year, and not some other year...</ToolTip>
                    <Default>2020</Default>
                </Object>
            </Declarations>
            <Code Language="cpp">
                <![CDATA[#pragma once
//------------------------------------------------------------------------------
/**
    $description$

    (C) $year$ Individual contributors, see AUTHORS file
*/
//------------------------------------------------------------------------------
namespace $namespace$
{
$end$
} // namespace $namespace$
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.0.0">
    	<Header>
    		<Title>Nebula Function</Title>
    		<Shortcut>NebFunc</Shortcut>
    	</Header>
    	<Snippet>
    		<Declarations>
    			<Object>
    				<ID>Classname</ID>
    				<Type>String of text</Type>
    				<Default>Class</Default>
    			</Object>    			
    		</Declarations>
    		<Code Language="cpp">
    			<![CDATA[//------------------------------------------------------------------------------
/**
*/
void
$Classname$::$end$()
{
	//FIXME: empty
}

    			]]>
    		</Code>
    	</Snippet>
    </CodeSnippet>


<!-- source  -->
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Nebula Namespace Source</Title>
            <Shortcut>nsource</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Object>
                    <ID>filename</ID>
                    <Type>String of text</Type>
                    <ToolTip>Write a description of this header file.</ToolTip>
                    <Default>WRITE ME OR ELSE!</Default>
                </Object>
                <Object>
                    <ID>namespace</ID>
                    <Type>Namespace</Type>
                    <ToolTip>Select a namespace.</ToolTip>
                    <Default>Base</Default>
                </Object>
                <Object>
                    <ID>year</ID>
                    <Type>Current year</Type>
                    <ToolTip>Please insert this year, and not some other year...</ToolTip>
                    <Default>2020</Default>
                </Object>
            </Declarations>
            <Code Language="cpp">
                <![CDATA[//------------------------------------------------------------------------------
//  $filename$.cc
//  (C) $year$ Individual contributors, see AUTHORS file
//------------------------------------------------------------------------------
#include "foundation/stdneb.h"
#include "$filename$.h"
namespace $namespace$
{
$end$
} // namespace $namespace$
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>
	
	    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Nebula Render Namespace Source</Title>
            <Shortcut>nrsource</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Object>
                    <ID>filename</ID>
                    <Type>String of text</Type>
                    <ToolTip>Write a description of this header file.</ToolTip>
                    <Default>WRITE ME OR ELSE!</Default>
                </Object>
                <Object>
                    <ID>namespace</ID>
                    <Type>Namespace</Type>
                    <ToolTip>Select a namespace.</ToolTip>
                    <Default>Base</Default>
                </Object>
                <Object>
                    <ID>year</ID>
                    <Type>Current year</Type>
                    <ToolTip>Please insert this year, and not some other year...</ToolTip>
                    <Default>2020</Default>
                </Object>
            </Declarations>
            <Code Language="cpp">
                <![CDATA[//------------------------------------------------------------------------------
//  $filename$.cc
//  (C) $year$ Individual contributors, see AUTHORS file
//------------------------------------------------------------------------------
#include "render/stdneb.h"
#include "$filename$.h"
namespace $namespace$
{
$end$
} // namespace $namespace$
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>



<!-- comment  -->
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Nebula function comment</Title>
            <Shortcut>ncomment</Shortcut>
        </Header>
        <Snippet>

            <Code Language="cpp">
                <![CDATA[//------------------------------------------------------------------------------
/**
*/$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>

<!-- component declaration  -->
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Nebula Component Declaration</Title>
            <Shortcut>ncomponentdecl</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Object>
                    <ID>classname</ID>
                    <Type>String of text</Type>
                    <ToolTip>Name of this component</ToolTip>
                    <Default>MyComponent</Default>
                </Object>
            </Declarations>
            <Code Language="cpp">
                <![CDATA[
// -! MOVE THIS TO INCLUDES !-
#include "game/component/component.h"

class $classname$
{
    __DeclareComponent($classname$);
public:
    // static void OnBeginFrame();
    // static void OnActivate(Game::InstanceId instance);
    // static void OnDeactivate(Game::InstanceId instance);

private:    
    // static void SetupAcceptedMessages();

    $end$
};]]>
            </Code>
        </Snippet>
    </CodeSnippet>

<!-- component definition -->
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Nebula Component Implementation</Title>
            <Shortcut>ncomponentimpl</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
                <Object>
                    <ID>classname</ID>
                    <Type>String of text</Type>
                    <ToolTip>Name of this component</ToolTip>
                    <Default>MyComponent</Default>
                </Object>
            </Declarations>
            <Code Language="cpp">
                <![CDATA[
// -! MOVE THIS TO INCLUDES !-
#include "basegamefeature/managers/componentmanager.h"

static $classname$Allocator *allocator;

__ImplementComponent($classname$, allocator);

//------------------------------------------------------------------------------
/**
*/
void
$classname$::Create()
{
    if (allocator != nullptr)
    {
        allocator->DestroyAll();
    }
    else
    {
        allocator = n_new($classname$Allocator);
    }

    __SetupDefaultComponentBundle(allocator);

    // allocator->functions.OnActivate = OnActivate;
    // allocator->functions.OnDeactivate = OnDeactivate;
    // allocator->functions.OnBeginFrame = OnBeginFrame;

    Game::ComponentManager::Instance()->RegisterComponent(allocator, "$classname$"_atm, allocator->GetIdentifier());

    // SetupAcceptedMessages();
}

//------------------------------------------------------------------------------
/**
*/
void
$classname$::Discard()
{
    n_delete(allocator);
}
$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>